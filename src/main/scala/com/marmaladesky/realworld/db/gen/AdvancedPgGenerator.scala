package com.marmaladesky.realworld.db.gen

import slick.codegen.SourceCodeGenerator
import slick.jdbc.JdbcBackend.Database
import slick.jdbc.PostgresProfile
import slick.jdbc.meta.MTable
import slick.sql.SqlProfile.ColumnOption
import slick.util.AsyncExecutor

import java.time.OffsetDateTime
import java.util.concurrent.TimeUnit
import scala.concurrent.{Await, Future}
import scala.concurrent.duration.Duration
import scala.concurrent.ExecutionContext.Implicits.global

object AdvancedPgGenerator {

  private def typeCustomization(typeName: String): Option[String] = {
    typeName match {
      case "timestamptz" => Some(classOf[OffsetDateTime].getName) // java.sql.Timestamp is generated by default
      case _ => None
    }
  }

  def main(args: Array[String]): Unit = {
    val host = args(0)
    val port = args(1).toInt
    val dbName = args(2)
    val schema = args(3)
    val user = args(4)
    val password = args(5)
    val output = args(6)
    val pkg = args(7)
    val profile = args(8)
    val genClassName = args(9)

    val url = s"jdbc:postgresql://$host:$port/$dbName"

    val db = Database.forURL(url, user, password, executor = AsyncExecutor.apply("codegen", 1, 1, 1, 1))
    val dbio = PostgresProfile
      .createModel(Some(MTable.getTables(None, Some(schema), None, Some(Seq("TABLE")))), ignoreInvalidDefaults = false)
    val model = db.run(dbio)
    val future : Future[SourceCodeGenerator] = model.map(model => {
      new SourceCodeGenerator(model) {

        override def Table = new Table(_) { table =>
          override def Column = new Column(_) { column =>
            override def rawType: String = {
              this.model.options.find(_.isInstanceOf[ColumnOption.SqlType]).flatMap { tpe =>
                val typeName = tpe.asInstanceOf[ColumnOption.SqlType].typeName
                typeCustomization(typeName)
              }.getOrElse { super.rawType }
            }
          }
        }

      }
    })
    val codegen : SourceCodeGenerator = Await.result(future, Duration.create(120, TimeUnit.SECONDS))
    codegen.writeToFile(profile, output, pkg, genClassName, s"$genClassName.scala")
  }

}